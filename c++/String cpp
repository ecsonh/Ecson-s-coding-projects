// String.cpp
//
// ICS 46 Winter 2022
// Project #0: Getting to Know the ICS 46 VM
//
// Implement all of your String member functions in this file.
//
// Note that the entire standard library -- both the C Standard
// Library and the C++ Standard Library -- is off-limits for this
// task, as the goal is to exercise your low-level implementation
// skills (pointers, memory management, and so on).

#include "String.hpp"
#include "OutOfBoundsException.hpp"

String::String()
{
    size = 0;
    str = new char[1];
    str[0] = '\0';
}

String::String(const char* chars)
{
    int size_s = 0;
    for(int i = 0; chars[i] != '\0'; i++)
    {
        size_s++;
    }
    str = new char[size_s+1];

    int i = 0;
    for(; chars[i] != '\0'; i++)
    {
        str[i] = chars[i];
    }
    size = i;
    str[i] = '\0';
}
String::String(const String& s)
{
    str = new char[s.length()];
    int size = 0;
    for(int i = 0; s.str[i] != '\0'; i++)
    {
        str[i] = s.str[i];
        size++;
    }
    str[size] = '\0';
}


    // Destroys a string, releasing any memory that is being
    // managed by this object.
String::~String() noexcept
{
    delete [] str;
}

    // Assigns an existing string into this one, replacing the
    // contents of this string with a copy of the contents of
    // the other.
String& String::operator=(const String& s)
{

    char* copy = new char[s.length()];
    int size = 0;
    for(int i = 0; s.str[i] != '\0'; i++)
    {
        copy[i] = s.str[i];
        size++;
    }
    copy[size] = '\0';
    delete [] str;
    str = copy;
    return *this;
}

void String::append(const String& s)
{
    int size_s = 0;
    for(int i = 0; s.str[i] != '\0'; i++)
    {
        size_s++;
    }
    int size = 0;
    for(int i = 0; str[i] != '\0'; i++)
    {
        size++;
    }
    int append_len = size + size_s+1;
    char* temp = new char[append_len];
    int i = 0;
    for(; str[i] != '\0'; i++)
    {
        temp[i] = str[i]; 
    }
    for(int j = 0;s.str[j] != '\0'; j++) //will begin at str[i] == '\0'
    {
        temp[i] = s.str[j];
        i++;
    }
    temp[i] = '\0';
    delete [] str;
    str = temp;


}

// at() returns one of the characters in the string, given
// a zero-based index (i.e., the index 0 is the first
// character of the string).  There are two variants of
// this member function, so that it is possible to use
// this to modify a string's characters, but only if
// the string is not constant.
//
// If the given index is not the index of a character
// within the string (e.g., if a string's length is
// five, valid indices range from 0..4 inclusive),
// this member function ns an OutOfBoundsException.
char String::at(unsigned int index) const
{
    int size = 0;
    for(int i = 0; str[i] != '\0'; i++)
    {
        size++;
    }
    if(index >= size)
    {
        throw OutOfBoundsException{};
    }
    return str[index];
}
char& String::at(unsigned int index)
{
    if(index >= size)
    {
        throw OutOfBoundsException{};
    }
    return str[index];
}

// clear() makes this string be empty.
void String::clear()
{
    delete [] str;
    size = 0;
    str = new char[1];
    str[0] = '\0';
}

// compareTo() compares the contents of this string to the
// contents of another string lexicographically, returning
// zero if they're exactly equal, a negative value if this
// string is "less than" the other one lexicographically,
// or a positive value if this string is "greater than"
// the other one lexicographically.
int String::compareTo(const String& s) const noexcept
{

    for (int i = 0; str[i] != '\0' or s.str[i] != '\0'; i++)
    {
        if (str[i] != s.str[i])
        {
            return str[i] - s.str[i];
        }
    }
    return 0;

}

// concatenate() returns a string that contains the
// characters in this string followed by the characters
// in s.
String String::concatenate(const String& s) const
{
    int size_s = 0;
    for(int i = 0; s.str[i] != '\0'; i++)
    {
        size_s++;
    }
    int size = 0;
    for(int i = 0; str[i] != '\0'; i++)
    {
        size++;
    }
    int append_len = size + size_s;
    char* temp = new char[append_len];
    int i = 0;
    for(; str[i] != '\0'; i++)
    {
        temp[i] = str[i]; 
    }
    for(int j = 0;s.str[j] != '\0'; j++) //will begin at str[i] == '\0'
    {
        temp[i] = s.str[j];
        i++;
    }
    temp[i] = '\0';
    String ss{temp};
    delete [] temp;
    return ss; //not done=====================================================

}

// contains() returns true if this string contains the
// given substring somewhere (e.g., the string "Is Boo
// happy today?" contains the substring "Boo"), or false
// otherwise.
bool String::contains(const String& substring) const noexcept
{
    int sub_len = 0;
    for(int i = 0; substring.str[i] != '\0'; i++)
    {
        sub_len++;
    }
    int i = 0;
    for (; str[i] != '\0'; i++)
    {
        int temp = i;
        for(int j = 0; j != sub_len;j++)
        {
            try
            {
                if (str[temp] != substring.str[j])
                {
                    break;
                }
                if (j==sub_len-1)
                {
                    return true;
                }
                temp++;
            }
            catch(...)
            {
                return false;
            }
        }
    }
    return false; //not done=====================================================
}

// equals() returns true if this string is equivalent to
// the given string (i.e., they both have the same length
// and contain the same sequence of characters).
bool String::equals(const String& s) const noexcept
{
   for (int i = 0; str[i] != '\0' or s.str[i] != '\0'; i++)
    {
        if (str[i] != s.str[i])
        {
            return false;
        }
    }
    return true;
}

// find() returns the index where the given substring is
// found within this string, or -1 if it's not found.
int String::find(const String& substring) const noexcept
{
     int sub_len = 0;
    for(int i = 0; substring.str[i] != '\0'; i++)
    {
        sub_len++;
    }
    int i = 0;
    for (; str[i] != '\0'; i++)
    {
        int temp = i;
        for(int j = 0; j != sub_len;j++)
        {
            try
            {
                if (str[temp] != substring.str[j])
                {
                    break;
                }
                if (j==sub_len-1)
                {
                    return i;
                }
                temp++;
            }
            catch(...)
            {
                return -1;
            }
        }
    }
    return -1; //not done=====================================================
}


// isEmpty() returns true if this string is empty, or
// false otherwise.
bool String::isEmpty() const noexcept
{
    int size = 0;
    for(int i = 0; str[i] != '\0'; i++)
    {
        size++;
    }
    return size ==0;
}

// length() returns the number of characters in this string.
unsigned int String::length() const noexcept
{
    int size = 0;
    for(int i = 0; str[i] != '\0'; i++)
    {
        size++;
    }
    return size;
}

// substring() returns a substring of this substring,
// containing the characters beginning at startIndex
// and ending at (but not including) endIndex.  For
// example, in the string "Boo is happy today",
// substring(7, 12) would return "happy".
String String::substring(unsigned int startIndex, unsigned int endIndex) const
{
    if (startIndex<0 || endIndex> size)
    {
        throw OutOfBoundsException{};
    }
    char* temp = new char[endIndex-startIndex+1];
    int i = 0;
    for(; startIndex < endIndex; startIndex++)
    {
        temp[i] = str[startIndex];
        i++;
    }
    temp[i] = '\0';
    String ss(temp);
    delete [] temp;
    return ss;
}

// toChars() returns a C-style string that is equivalent
// (i.e., has the same length and contains the same
// sequence of characters) as this string.  Note that
// the C-style string is not allocated by this member
// function, so it is not necessary to deallocate it.
const char* String::toChars() const noexcept
{
    return str;
}
